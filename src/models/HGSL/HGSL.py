from models.HGSL.layers import *
import torch.nn as nn


class HGSL(nn.Module):
    """
    Decode neighbors of input graph.
    """

    def __init__(self, args, nfeat, nclass, dev):
        super(HGSL, self).__init__()
        # self.GCN = GCN_Backup(nfeat, args.num_hidden, nclass, dropout=args.dropout)
        self.GCN = GCN(nfeat, args.num_hidden, nclass, dropout=args.dropout)
        self.GenAdjLayer = HGSL_AdjGenerator(nfeat, args.num_hidden, args.num_head, args.epsilon, dev)
        self.lambda_ = args.lambda_
        self.eta = args.eta

    def forward(self, x, h, adj_ori, adj_feat, mode, norm_graph_reg_loss):
        """

        Args:
            x: input feature
            h: embedding
            adj_ori: adj of graph
            adj_feat: adj generated by feature
            mode: gen adj using 'feat' or 'emb'
        Returns:
            logits: predicted labels
            h: embedding generated by GCN
            adj_sim:
            adj_agg:

        """
        # ! Generate adj
        if mode == 'feat':
            adj_sim = self.GenAdjLayer(x, mode='feat')
            if norm_graph_reg_loss > 0:
                adj_sim = F.normalize(adj_sim, dim=1, p=1)  # Row normalization
                adj_agg = self.lambda_ * adj_ori + (1 - self.lambda_) * adj_sim
            else:
                adj_agg = F.normalize(adj_sim, dim=1, p=1)  # Row normalization
                adj_agg = self.lambda_ * adj_ori + (1 - self.lambda_) * adj_agg
        elif mode == 'emb':
            adj_sim = self.GenAdjLayer(h, mode='emb')
            if norm_graph_reg_loss > 0:
                adj_sim = F.normalize(adj_sim, dim=1, p=1)  # Row normalization
                adj_agg = self.lambda_ * adj_ori + (1 - self.lambda_) * adj_sim
            else:
                adj_agg = F.normalize(adj_sim, dim=1, p=1)  # Row normalization
                adj_agg = self.lambda_ * adj_ori + (1 - self.lambda_) * adj_agg
            # combine feat and emb sim mat
            adj_agg = self.eta * adj_agg + (1 - self.eta) * adj_feat

        # ! Aggregate using adj_agg
        logits, h = self.GCN(x, adj_agg)
        return logits, h, adj_sim, adj_agg


class GCN(nn.Module):
    def __init__(self, nfeat, nhid, nclass, dropout):
        super(GCN, self).__init__()
        self.gc1 = GraphConvolution(nfeat, nhid)
        self.gc2 = GraphConvolution(nhid, nclass)
        self.dropout = dropout

    def forward(self, x, adj):
        x = F.relu(self.gc1(x, adj))
        emb = x.detach()
        x = F.dropout(x, self.dropout, training=self.training)
        x = self.gc2(x, adj)
        return F.log_softmax(x, dim=1), emb
